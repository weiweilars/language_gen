from matplotlib import pyplot as plt
import cv2
import random
import numpy as np
from numpy.linalg import inv
import pdb
from faker import Faker
import os
fake = Faker()
import datetime

letters = ' abcdefghigklmnopqrstuvwxyz'
numbers = '1234567890'

INPUT_TYPE = {"first_name": 5, "last_name": 6, "birth_id": 7, "org_no_card": 8, "id_expire": 9, 'nation': 10}

def data_generator(type, size):
    return ''.join(random.choices(type, k=size)).capitalize()

def Real_EU_card(template_type, template_folder,image, offset=10, size=300, rho=5):

    ## create a background image (A4)
    b_img = np.zeros([2480,3508],dtype=np.uint8)
    b_img.fill(255)

    image_file = os.path.join(template_folder, template_type+'.tif')
    temp_image = cv2.imread(image_file, cv2.IMREAD_GRAYSCALE)

    img_h, img_w = temp_image.shape

    temp_img = b_img.copy()
    temp_img[offset:offset+img_h, offset:offset+img_w] = temp_image

    scanned_image = cv2.imread(image, cv2.IMREAD_GRAYSCALE)
    scan_h, scan_w = scanned_image.shape

    scanned_image = cv2.resize(scanned_image, (img_w, int(scan_h*img_w/scan_w)), interpolation=cv2.INTER_AREA)

    scan_h, scan_w = scanned_image.shape
    scan_img = b_img.copy()
    scan_img[offset:offset+scan_h, offset:offset+scan_w] = scanned_image

    (thresh, scan_img) = cv2.threshold(scan_img, 127, 255, cv2.THRESH_BINARY)

    # cv2.imshow('scan image',test_image)
    # cv2.waitKey()

    return temp_img, scan_img

def ImageCreate_eu_card(template_type, template_folder, a4_height=2339, a4_width=1728, resize=512):
    ## create a background image
    b_img = np.zeros([a4_height, a4_width],dtype=np.uint8)
    b_img.fill(255)

    image_file = os.path.join(template_folder, template_type+'.tif')
    image = cv2.imread(image_file, cv2.IMREAD_GRAYSCALE)

    img_h, img_w = image.shape
    image = cv2.resize(image, (int(a4_width*0.42), int(img_h*int(a4_width*0.42)/img_w)))
    img_h, img_w = image.shape
    b_img[0:img_h, 0:img_w] = image
    image = b_img.copy()

    image = np.dstack((image, image, image))

    label_img = np.zeros([a4_height,a4_width],dtype=np.uint8)
    # label_img.fill(255)

    font = cv2.FONT_HERSHEY_SIMPLEX
    fontScale = 0.6
    fontColor = (47,79,79)
    lineType = 2

    if template_type in ("BE","BG","CY","CZ","DK","EE","ES","FI","FR","GR","HR","HU","IE","IS","LT","LU","LV","MT","NL","NO","PL","PT","RO","SI","SK","UK"):
        cv2.rectangle(image, (554-3, 120-15), (554+20, 120+9), (238, 75, 43),2)
        cv2.rectangle(image, (200-3, 220-20), (200+478, 220+9), (238, 75, 43),2)
        bottomLeftCornerOfText_lastname = (200+random.randint(-2,2),220+random.randint(-2,2))
        cv2.rectangle(image, (200-3, 264-20), (200+478, 264+9), (238, 75, 43),2)
        bottomLeftCornerOfText_givenname = (200+random.randint(-2,2),264+random.randint(-2,2))
        cv2.rectangle(image, (200-3, 310-20), (200+478, 310+9), (238, 75, 43),2)
        bottomLeftCornerOfText_birth = (200+random.randint(-2,2),310+random.randint(-2,2))
        bottomLeftCornerOfText_id = (545+random.randint(-2,2),310+random.randint(-2,2))
        cv2.rectangle(image, (200-3, 356-20), (200+478, 356+9), (238, 75, 43),2)
        bottomLeftCornerOfText_iid = (450+random.randint(-2,2),356+random.randint(-2,2))
        cv2.rectangle(image, (200-3, 401-20), (200+478, 401+9), (238, 75, 43),2)
        bottomLeftCornerOfText_cardnr = (200+random.randint(-2,2),401+random.randint(-2,2))
        bottomLeftCornerOfText_valid = (530+random.randint(-2,2),401+random.randint(-2,2))
    elif template_type in ("AT","CH","IT","LI"):
        bottomLeftCornerOfText_lastname = (61+random.randint(-2,2),332+random.randint(-2,2))
        bottomLeftCornerOfText_givenname = (61+random.randint(-2,2),380+random.randint(-2,2))
        bottomLeftCornerOfText_birth = (650+random.randint(-2,2),380+random.randint(-2,2))
        bottomLeftCornerOfText_id = (61+random.randint(-2,2),437+random.randint(-2,2))
        bottomLeftCornerOfText_iid = (550+random.randint(-2,2),437+random.randint(-2,2))
        bottomLeftCornerOfText_cardnr = (61+random.randint(-2,2),489+random.randint(-2,2))
        bottomLeftCornerOfText_valid = (650+random.randint(-2,2),489+random.randint(-2,2))

 #   date = str(Random_date())
    date = str(fake.date())
    cv2.putText(image,date,
                 bottomLeftCornerOfText_birth,
                 font,
                 fontScale,
                 fontColor,
                 lineType)
    cv2.putText(image,data_generator(numbers,10),
                 bottomLeftCornerOfText_id,
                 font,
                 fontScale,
                 fontColor,
                 lineType)
    iid_num_numbers = random.randint(3,10)
    iid_num_letters = random.randint(3,10)
    cv2.putText(image,data_generator(numbers,iid_num_numbers) + " - " + data_generator(letters,iid_num_letters),
                 bottomLeftCornerOfText_iid,
                 font,
                 fontScale,
                 fontColor,
                 lineType)
    cv2.putText(image,data_generator(numbers,15),
                 bottomLeftCornerOfText_cardnr,
                 font,
                 fontScale,
                 fontColor,
                 lineType)

    num_letters = random.randint(5,15)
    cv2.putText(image,data_generator(letters,num_letters),
                bottomLeftCornerOfText_lastname,
                font,
                fontScale,
                fontColor,
                lineType)

    num_letters = random.randint(5,15)
    cv2.putText(image,data_generator(letters,num_letters),
                    bottomLeftCornerOfText_givenname,
                    font,
                    fontScale,
                    fontColor,
                    lineType)

 #   date = str(Random_date())
    date = str(fake.date())
    cv2.putText(image,date,
                bottomLeftCornerOfText_valid,
                font,
                fontScale,
                fontColor,
                lineType)

    cv2.imshow('changed image',image)
    cv2.waitKey()
    ## add noise
    uni_r = np.random.uniform(0.5,0.9)
    imp_r = np.random.uniform(0.5,0.9)

    uniform_noise = np.zeros((image.shape[0], image.shape[1]),dtype=np.uint8)
    cv2.randu(uniform_noise,0,255)

    ret,impulse_noise = cv2.threshold(uniform_noise,250,255,cv2.THRESH_BINARY)
    impulse_noise = (impulse_noise*uni_r).astype(np.uint8)

    uniform_noise = (uniform_noise*imp_r).astype(np.uint8)
    noisy_image2 = cv2.add(image,uniform_noise)
    image = cv2.add(noisy_image2, impulse_noise)

    ## Adding border to image to put images at random places in A4 image
    # img_a4 = Make_img_a4(image)

    # cv2.imwrite("./eu_card_test_result/changed_image.jpg",img_a4)
    # diff = np.float32(perturbed_four_points) - np.float32(four_points)

    return b_img

def Make_img_a4(img):
  offset_left = random.randint(0,1530) # 2480 - 950 = 1530
  offset_right = 1530 - offset_left
  offset_top = random.randint(0,2558) # 3508 - 950 = 2558
  offset_bottom = 2558 - offset_top
  img_a4 = cv2.copyMakeBorder(
        img,
        top=offset_top,
        bottom=offset_bottom,
        left=offset_left,
        right=offset_right,
        borderType=cv2.BORDER_CONSTANT,
        value=[255,255,255]
  )
  return img_a4


if __name__ == "__main__":
    ImageCreate_eu_card("UK", "../../../data/seg_data/eu_card_type/")
