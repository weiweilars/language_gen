import os
import cv2
import glob
from typing import Optional, Tuple
from src.datamodules.datasets.dataset import SegDataset
from src.datamodules.datasets.predict_dataset import SegInfDataset
from pytorch_lightning import LightningDataModule
from torch.utils.data import DataLoader, Dataset
import pdb


class SegDataModule(LightningDataModule):

    def __init__(
            self,
            pin_memory=False,
            **kwargs):
        
        super().__init__()

        self.train_params = kwargs['train_loader']
        self.val_params = kwargs['val_loader']
        self.img_params = kwargs['image'] 
        self.pin_memory = pin_memory

    def train_dataloader(self):

        intyg_folder = os.path.join(self.train_params['data_folder'], 'intyg')
        eucard_folder = os.path.join(self.train_params['data_folder'], 'eucard')
        timetable_folder = os.path.join(self.train_params['data_folder'], 'eucard')

        intyg_type = [self.train_params['gen_types'][0]]
        eucard_type = [self.train_params['gen_types'][1]]
        timetable_type = [self.train_params['gen_types'][2]]

        intyg_datasize = int(self.train_params['data_size']*self.train_params['gen_ratio'][0])
        eucard_datasize = int(self.train_params['data_size']*self.train_params['gen_ratio'][1])
        timetable_datasize = int(self.train_params['data_size']*self.train_params['gen_ratio'][2])
        
        intyg_dataset = SegDataset(intyg_datasize, intyg_type, [1], intyg_folder, self.img_params['height'], self.img_params['width'], self.img_params['resize'], data_name='train', generate_new=self.train_params['generate_new'])

        eucard_dataset = SegDataset(eucard_datasize, eucard_type, [1], eucard_folder, self.img_params['height'], self.img_params['width'], self.img_params['resize'], data_name='train', generate_new=self.train_params['generate_new'])

        timetable_dataset = SegDataset(timetable_datasize, timetable_type, [1], timetable_folder, self.img_params['height'], self.img_params['width'], self.img_params['resize'], data_name='train', generate_new=self.train_params['generate_new'])

        intyg_dataloader = DataLoader(dataset=intyg_dataset,
                                      batch_size=self.train_params['batch_size'],
                                      num_workers = self.train_params['num_workers'],
                                      shuffle=True)

        eucard_dataloader = DataLoader(dataset=eucard_dataset,
                                       batch_size=self.train_params['batch_size'],
                                       num_workers = self.train_params['num_workers'],
                                       shuffle=True)

        timetable_dataloader = DataLoader(dataset=timetable_dataset,
                                          batch_size=self.train_params['batch_size'],
                                          num_workers = self.train_params['num_workers'],
                                          shuffle=True)


        if self.trainer.current_epoch % 3 == 0:
        
            return intyg_dataloader

        elif self.trainer.current_epoch % 3 == 1:

            return eucard_dataloader
        else:
            
            return timetable_dataloader


    def val_dataloader(self):

        intyg_folder = os.path.join(self.val_params['data_folder'], 'intyg')
        eucard_folder = os.path.join(self.val_params['data_folder'], 'eucard')
        timetable_folder = os.path.join(self.val_params['data_folder'], 'eucard')

        intyg_type = [self.val_params['gen_types'][0]]
        eucard_type = [self.val_params['gen_types'][1]]
        timetable_type = [self.val_params['gen_types'][2]]
        
        intyg_datasize = int(self.val_params['data_size']*self.val_params['gen_ratio'][0])
        eucard_datasize = int(self.val_params['data_size']*self.val_params['gen_ratio'][1])
        timetable_datasize = int(self.val_params['data_size']*self.val_params['gen_ratio'][2])
        
        intyg_dataset = SegDataset(intyg_datasize, intyg_type, [1], intyg_folder, self.img_params['height'], self.img_params['width'], self.img_params['resize'], data_name='val', generate_new=self.val_params['generate_new'])

        eucard_dataset = SegDataset(eucard_datasize, eucard_type, [1], eucard_folder, self.img_params['height'], self.img_params['width'], self.img_params['resize'], data_name='val', generate_new=self.val_params['generate_new'])

        timetable_dataset = SegDataset(timetable_datasize, timetable_type, [1], timetable_folder, self.img_params['height'], self.img_params['width'], self.img_params['resize'], data_name='val', generate_new=self.val_params['generate_new'])


        intyg_dataloader = DataLoader(dataset=intyg_dataset,
                                      batch_size=self.val_params['batch_size'],
                                      num_workers = self.val_params['num_workers'],
                                      shuffle=False)

        eucard_dataloader = DataLoader(dataset=eucard_dataset,
                                       batch_size=self.val_params['batch_size'],
                                       num_workers = self.val_params['num_workers'],
                                       shuffle=False)

        timetable_dataloader = DataLoader(dataset=timetable_dataset,
                                          batch_size=self.val_params['batch_size'],
                                          num_workers = self.val_params['num_workers'],
                                          shuffle=True)



        if self.trainer.current_epoch % 3 == 0:
        
            return intyg_dataloader

        elif self.trainer.current_epoch % 3 == 1:

            return eucard_dataloader
        else:
            
            return timetable_dataloader
